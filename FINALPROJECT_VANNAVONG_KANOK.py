#==============================================================================
#Final - Generative Art Gallery
#Kanok Vannavong, Jasmine Chittarath
#Created April 17, 2020
#completed April 27, 2020

#this script will display 6 generative art pieces in total, towards a target
#audience of children. Our six generative art pieces will serve as an educational
#visual tool for teaching toddlers and small children colors and shapes. This 
#is intended to be an interactive experience for small children as each art
#piece is generated by the user's keyboard clicks

#TUTORIAL: there are six shapes to choose from (circle, oval
#star, rectangle, triangle, and polygon). The purpose of this code is to ask your
#child verbally, "What letter does the word (say shape here) start with?" With that
#your child, for example, will press C on the keyboard for circle if they know it, 
#and the art associated with that paricular shape will be generated in a 
#random color. With that random color, an additional
#learning application would be for your child to also name the color the art is generated in!
#repeat this process for as many or all the shapes you'd like. 

#Hit the spacebar to reset your window before selecting a new shape.

#==============================================================================
 # MILESTONE DESCRIPTION & ORIGINAL PSUEDOCODE

#originally, this script was intended to display 12-15 generative art pieces in total, informing viewers about the affects of drug use and visualizing that through generative art
# we changed this to our current script to cater to a specific audience of children 
# after hearing that many parents were struggling to teach their children from home during the pandemic
 # we were inspired to make an educational program for children instead

#--------old pseudocode--------------------------

#choose a message we want to inform users about (drug use and varying effect on the brain)
#how can we visualize it with generative art? (make animations miror brain activity - faster/slower depending on drug)

#import libraries
#add sound here (if any)
#define variables

#-----define functions here!-----

#function/piece number 1(for example) drawCircle() or artPiece1():
  #any drawing commands
  #maybe a line to clear screen before another function is called

#artPiece2():
#artPiece3():
#etc, etc. 

#if we do a 3x3 grid, maybe set the drawing limits withing a specific x,y coordinate area for each piece?

#-----game loop-----
#call each art piece and maybe put them in loops or something to determine how long each one runs for before clearing the screen?

#to do/figure out
# show more than one piece at a time--set boundaries for each art piece function?

#==============================================================================

#UPDATED PSUEDOCODE:
#choose a message we want to inform users about (teach kids colors and shapes)

#import libraries
#add sound here (if any)
#define variables

#-----define functions here!-----

#function/piece number 1(for example) drawCircle() or artPiece1():
  #any drawing commands
  #maybe a line to clear screen before another function is called

#artPiece2():
#artPiece3():
#etc, etc. 

#-----game loop-----
#call each art piece by keyboard press

#==============================================================================

#----------------IMPORT LIBRARIES-----------------------------------
from random import *
import random

import numpy as np
import pygame
pygame.init()

#-----------------DEFINE VARIABLES-----------------------------------------

win = pygame.display.set_mode((400,400))

clock = pygame.time.Clock()
win.fill((0,0,0))
run = True
FPS = 25

red = (255, 0, 0)
orange = (255, 153, 51)
yellow = (255, 255, 0)
green = (0, 255, 0)
blue = (0, 102, 255)
violet = (102, 0, 204)

rainbow = [red, orange, yellow, green, blue, violet]
x = randint(0, 300)
y = randint(0, 300)
r = 40
#originally had more variables defined here but later moved them to their respective functions to clean up code and allow for more flexibility to edit each function

#---------------------------DEFINE FUNCTIONS----------------------------------------

#DRAWING FUNCTIONS GO HERE

#circle
def drawCircles(r,x,y):
    x = randint(0, 400)
    y = randint(0, 400)
    pygame.draw.circle(win,color,(x,y),r)

#oval
def drawOval():
    x = randint(0, 400)
    y = randint(0, 400)
    width = randint(20,80)
    height = randint(20,80)
    rect = pygame.Rect(x, y, width, height)
    pygame.draw.ellipse(win, color, rect)

#star
def drawStar():
    step = randint(0,200)
    pointList = [(58, 21), (271,111), (76,182), (182, 2), (219,200)]
    pointListB = [((58+step), (21+step)), ((271+step,111+step)), ((76+step,182+step)), ((182+step), (2+step)), ((219+step),(200+step))]
    pointListC = [((58-step), (21-step)), ((271-step,111-step)), ((76-step,182-step)), ((182-step), (2-step)), ((219-step),(200-step))]
    pygame.draw.polygon(win, color, pointList)
    pygame.draw.polygon(win, color, pointListB)
    pygame.draw.polygon(win, color, pointListC)

#rectangle
def drawRect():
    x = randint(0, 400)
    y = randint(0, 400)
    width = randint(10,100)
    height = randint(10,100)
    pygame.draw.rect(win, color, (x, y, width, height))     
    
#triangle
def drawTriangle():
    pop = randint(0,50)
    pointlist_1 = [(25+pop, 25+pop), (105+pop, 185+pop), (185-pop, 25-pop)]
    pygame.draw.polygon(win, color, pointlist_1, 1)
    pointlist_2 = [(205+pop, 25+pop), (285+pop, 185+pop), (365+pop, 25+pop)]
    pygame.draw.polygon(win, color, pointlist_2, 4)
    pointlist_3 = [(205-pop, 205-pop), (285-pop, 365-pop), (365-pop, 205-pop)]
    pygame.draw.polygon(win, color, pointlist_3, 0)
    pointlist_4 = [(25+pop, 205), (105-pop, 365), (185+pop, 205-pop)]
    pygame.draw.polygon(win, color, pointlist_4, 10)
#kept getting a syntax error for def drawTriangle and figured out I had forgotten a parentheses on the line before.

     
#polygon
def drawPolygon():
    x = randint(0,400)
    y = randint(0,400)
    kick = randint(0,50)
    hit = randint(0,100)
    width = randint(0,10)
    pointlist_x = [(x,y), (x,y), (x,y), (x,y)]
    pygame.draw.polygon(win, color, pointlist_x, width)
    pointlist_y = [(x+kick, y+kick), (x-hit, y-hit), (x-kick, y+hit), (x+hit, y-kick), (x+kick, y+hit), (x-hit, y+kick)]
    pygame.draw.polygon(win, color, pointlist_y, width)
    pointlist_z = [(x+kick, y+hit), (x+hit, y+kick), (x-hit, y+kick), (x+kick, y-hit)]
    pygame.draw.polygon(win, color, pointlist_z, width)
    #originally attempted a hexagon but couldn't figure out how to randomize points while maintaining shapes.
    #attempting to use turtle to draw made python crash!

def exitGame():    #cleans up and exits game    
    win.fill((0,0,0))    
    pygame.display.update()    
    pygame.quit() #clean up pygame       
    run = False

#-------------------GAME LOOP-----------------------------------------------------------

while run :    
    clock.tick(FPS)    
    pygame.event.pump() #internally processes key presses. removing this will break the code.    
    keypress = pygame.key.get_pressed()  
    
    #keypresses will generate art depending on the first letter of shape name
    
    #clear screen with spacebar
    if keypress[pygame.K_SPACE] :
        win.fill((0,0,0))
    
    #escape for game exit    
    if keypress[pygame.K_ESCAPE] :                    
        exitGame() 
        
    #c for circle
    if keypress[pygame.K_c] : 
        color = random.choice(rainbow)
        for i in range(5):
            drawCircles(r,x=int(x),y=int(y))

    #o for oval
    if keypress[pygame.K_o] :  
        #color variable was moved here instead of within the function so that each iteration can run in a different color
        color = random.choice(rainbow)                  
        for i in range(5):
            drawOval()
        
    #s for star
    if keypress[pygame.K_s] :  
        color = random.choice(rainbow)
        drawStar()
    
    #r for rectangle
    if keypress[pygame.K_r] :
        color = random.choice(rainbow)
        for i in range(5):                 
            drawRect()
    
    #t for triangle
    if keypress[pygame.K_t] :                    
        color = random.choice(rainbow)
        for i in range(5):
            drawTriangle()
    
    #p for polygon
    if keypress[pygame.K_p] :                    
        color = random.choice(rainbow)
        for i in range(5):
            drawPolygon()
        
    pygame.display.flip()

pygame.quit()